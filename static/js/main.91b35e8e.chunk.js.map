{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/Center/index.js","components/FlashCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Title","state","index","count","words","split","this","setState","length","interval","setInterval","flash","clearInterval","href","React","Component","Center","FlashCard","onClick","handleClick","id","onMouseEnter","handleMouseEnter","name","onMouseLeave","handleMouseLeave","alt","src","link","App","flags","clicked","topScore","current","shuffle","sort","a","b","Math","random","includes","country","class","map","item","image","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ghEAWeA,MARf,SAAiBC,GACb,OACE,yBAAKC,UAAU,WACZD,EAAME,WCyCAC,G,kBA/Bb,WAAYH,GAAQ,IAAD,8BACjB,4CAAMA,KACDI,MAAQ,CAAEC,MAAO,EAAGC,MAAO,GAChC,EAAKC,MAAQP,EAAME,SAASM,MAAM,KAHjB,E,qEASV,IAAD,OACNC,KAAKC,SAAS,SAAAN,GAAK,MAAK,CACtBC,MAAOD,EAAME,MAAQ,EAAKC,MAAMI,OAChCL,MAAOF,EAAME,MAAM,O,0CAIF,IAAD,OAClBG,KAAKG,SAAWC,YAAY,kBAAM,EAAKC,SAAS,O,6CAIhDC,cAAcN,KAAKG,Y,+BAInB,OACE,uBAAGI,KAAK,KAAI,wBAAIf,UAAU,SAASQ,KAAKF,MAAME,KAAKL,MAAMC,a,GA3B3CY,IAAMC,Y,MCLXC,MAPf,SAAgBnB,GAEd,OACE,yBAAKC,UAAU,SAASD,EAAME,W,MCOnBkB,MATf,SAAmBpB,GACjB,OACE,yBAAKC,UAAU,gBAAgBoB,QAAS,kBAAMrB,EAAMsB,YAAYtB,EAAMuB,KACpEC,aAAc,kBAAMxB,EAAMyB,iBAAiBzB,EAAM0B,OAAOC,aAAc3B,EAAM4B,kBAC1E,yBAAKC,IAAK7B,EAAM0B,KAAMI,IAAK9B,EAAM+B,S,OCyF1BC,E,2MAvFb5B,MAAQ,CACN6B,QACAC,QAAQ,GACRC,SAAS,EACTC,QAAQ,I,EAIVC,QAAU,WACR,IAAMJ,EAAQ,EAAK7B,MAAM6B,MAAMK,KAAK,SAACC,EAAGC,GACtC,MAAO,GAAMC,KAAKC,WAEpB,EAAKhC,SAAS,CAACuB,W,EAIjBX,YAAc,SAAAC,GACR,EAAKnB,MAAM8B,QAAQS,SAASpB,GAE9B,EAAKb,SAAS,SAAAN,GAAK,MAAK,CACtB8B,QAAS,MAIX,EAAKxB,SAAS,SAAAN,GAAK,MAAK,CACtB8B,QAAQ,GAAD,mBAAM9B,EAAM8B,SAAZ,CAAqBX,IAC5BY,SAAU/B,EAAM8B,QAAQvB,OAAO,EAAIP,EAAM+B,SAAW/B,EAAM8B,QAAQvB,OAAO,EAAIP,EAAM+B,YAGvF,EAAKE,W,EAGPZ,iBAAmB,SAAAC,GACjB,EAAKhB,SAAS,CAACkC,QAAQlB,K,EAGzBE,iBAAmB,WACjB,EAAKlB,SAAS,CAACkC,QAAQ,M,wEAGhB,IAAD,OACN,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,2DACE,yBAAKrB,GAAG,OACN,0BAAMsB,MAAM,gBAAZ,UAAmCpC,KAAKL,MAAM8B,QAAQvB,QACtD,0BAAMkC,MAAM,oBAAZ,cAA2CpC,KAAKL,MAAM+B,WAExD,kBAAC,EAAD,KACG1B,KAAKL,MAAM6B,MAAMa,IAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACExB,GAAIwB,EAAKxB,GACTG,KAAMqB,EAAKrB,KACXK,KAAMgB,EAAKC,MACX1B,YAAa,EAAKA,YAClBG,iBAAkB,EAAKA,iBACvBG,iBAAkB,EAAKA,sBAI7B,yBAAKL,GAAG,WAAWd,KAAKL,MAAMwC,c,GA9DtB3B,IAAMC,WCIJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.91b35e8e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return (\n      <div className=\"wrapper\">\n        {props.children}\n      </div>\n    );\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\n// const prep = cc => {\n//   let str = [];\n//   for (let i = 0; cc.length; i++) {\n//     if (cc.substring(i, i + 1) === \"-\") {\n//       str.push(\" \")\n//     } else {\n//       str.push(cc[i])\n//     }\n//   }\n//   return str.join(\"\")\n// }\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { index: 0, count: 0 };\n    this.words = props.children.split(\"-\")\n    \n    // let title = props.children.split(\" \")\n    // this.words = title.map(prep)\n  }\n\n  flash() {\n    this.setState(state => ({\n      index: state.count % this.words.length,\n      count: state.count+1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.flash(), 600);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <a href=\"/\"><h2 className=\"title\">{this.words[this.state.index]}</h2></a>\n    );\n  }\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Center(props) {\n\n  return (\n    <div className=\"flags\">{props.children}</div>\n  )\n}\n\nexport default Center;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction FlashCard(props) {\n  return (\n    <div className=\"img-container\" onClick={() => props.handleClick(props.id)}\n      onMouseEnter={() => props.handleMouseEnter(props.name)} onMouseLeave={props.handleMouseLeave}>\n        <img alt={props.name} src={props.link} />\n    </div>\n  )\n}\n\nexport default FlashCard;\n","import React from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Center from \"./components/Center\";\nimport FlashCard from \"./components/FlashCard\";\nimport flags from \"./flags.json\";\n\n\nclass App extends React.Component {\n  \n  state = {\n    flags,\n    clicked:[],\n    topScore:0,\n    current:\"\"\n  }\n\n  //shuffle array\n  shuffle = () => {\n    const flags = this.state.flags.sort((a, b) => {\n      return 0.5 - Math.random()\n    });\n    this.setState({flags})\n  }\n\n  // handle which flag was clicked\n  handleClick = id => {\n    if (this.state.clicked.includes(id)) {\n        \n      this.setState(state => ({\n        clicked: []\n      }))\n    } \n    else {\n      this.setState(state => ({\n        clicked: [...state.clicked, id],\n        topScore: state.clicked.length+1 > state.topScore ? state.clicked.length+1 : state.topScore\n      }))\n    }\n    this.shuffle()\n  }\n\n  handleMouseEnter = name => {\n    this.setState({country:name})\n  }\n  \n  handleMouseLeave = () => {\n    this.setState({country:\"\"})\n  }\n\n  render(){\n    return (\n      <Wrapper>\n        <Title>test-your-memory.-don't-click-the same-flag-twice.</Title>\n          <div id=\"tab\">\n            <span class=\"scores score\">score: {this.state.clicked.length}</span> \n            <span class=\"scores top-score\">top score: {this.state.topScore}</span>\n          </div>\n          <Center>\n            {this.state.flags.map(item => (\n              <FlashCard \n                id={item.id}\n                name={item.name}\n                link={item.image}\n                handleClick={this.handleClick}\n                handleMouseEnter={this.handleMouseEnter}\n                handleMouseLeave={this.handleMouseLeave}\n              />\n            ))}\n          </Center>\n          <div id=\"caption\">{this.state.country}</div>\n      </Wrapper>\n    )\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}